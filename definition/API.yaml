openapi: "3.0.0"

info:
  version: Draft
  title: Synergy API
  description: ""
  license:
    name: MIT

servers:
  - url: http://localhost:3000 #http://synergy.synergatika.com/v1

paths:
  # Paths: Authentication
  /auth/authenticate:
    post:
      summary: "Authenticate users"
      operationId: authAuthenticate
      tags:
        - authentication
      requestBody:
        $ref: '#/components/requestBodies/AuthenticationRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Authenticate'
        '204':
         $ref: '#/components/responses/EmailSend'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '404':
          $ref: '#/components/responses/Not_Found'
        '422':
          $ref: '#/components/responses/DB_Error'

  /auth/register:
    post:
      summary: "Auto-Register new user (only as customer)"
      operationId: authRegister
      tags:
        - authentication
      requestBody:
        $ref: '#/components/requestBodies/RegisterRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/EmailSend'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '404':
          $ref: '#/components/responses/Not_Found'
        '422':
          $ref: '#/components/responses/DB_Error'

  /auth/register/{access}:
    post:
      summary: "Register/Invite a new user (only for admins or merchants)"
      operationId: authRegisterWithoutPass
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/access'
      tags:
        - authentication
      requestBody:
        $ref: '#/components/requestBodies/RegisterWithoutPassRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/EmailSend'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/Not_Found'
        '422':
          $ref: '#/components/responses/DB_Error'

  /auth/change_pass:
    put:
      summary: "A logged in user changes the password"
      operationId: changePassInside
      security:
        - bearerAuth: []
      tags:
        - authentication
      requestBody:
        $ref: '#/components/requestBodies/ChangePassInRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Update'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/Not_Found'
        '422':
          $ref: '#/components/responses/DB_Error'

  /auth/verify_email/{email}:
    get:
      summary: "Ask for email validation"
      operationId: askVerification
      parameters:
        - $ref: '#/components/parameters/email'
      tags:
        - authentication
      responses:
        '200':
          $ref: '#/components/responses/EmailSend'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '404':
          $ref: '#/components/responses/Not_Found'
        '422':
          $ref: '#/components/responses/DB_Error'
  /auth/verify_email:
    post:
      summary: "Checks if link is valid and verify email"
      operationId: checkVerification
      tags:
        - authentication
      requestBody:
        $ref: '#/components/requestBodies/CheckTokenRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Create'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '404':
          $ref: '#/components/responses/Not_Found'
        '422':
          $ref: '#/components/responses/DB_Error'

  /auth/forgot_pass/{email}:
    get:
      summary: "Ask for password restoration"
      operationId: askRestoration
      parameters:
        - $ref: '#/components/parameters/email'
      tags:
        - authentication
      responses:
        '200':
          $ref: '#/components/responses/EmailSend'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '404':
          $ref: '#/components/responses/Not_Found'
        '422':
          $ref: '#/components/responses/DB_Error'
  /auth/forgot_pass:
    post:
      summary: "Checks if link is valid and procced"
      operationId: checkRestoration
      tags:
        - authentication
      requestBody:
        $ref: '#/components/requestBodies/CheckTokenRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Update'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '404':
          $ref: '#/components/responses/Not_Found'
        '422':
          $ref: '#/components/responses/DB_Error'
    put:
      summary: "A no logged in user changes the password"
      operationId: changePassOutside
      tags:
        - authentication
      requestBody:
        $ref: '#/components/requestBodies/ChangePassOutRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Update'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '404':
          $ref: '#/components/responses/Not_Found'
        '422':
          $ref: '#/components/responses/DB_Error'
  # Paths: Profile & Merchant
  /profile:
    get:
      summary: "Read user's profile info (only for customers)"
      operationId: readUserProfile
      security:
        - bearerAuth: []
      tags:
        - profile
      responses:
        '200':
          $ref: '#/components/responses/Customer'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/DB_Error'
    put:
      summary: "Update user's profile info (only for customers)"
      operationId: updateUserProfile
      security:
        - bearerAuth: []
      tags:
        - profile
      requestBody:
        $ref: '#/components/requestBodies/CustomerRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Customer'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/DB_Error'

  /merchants:
    get:
      summary: "Read all merchants' info (not require login)"
      operationId: readAllMerchants
      tags:
        - merchants
      responses:
        '200':
          $ref: '#/components/responses/Merchants'
        '422':
          $ref: '#/components/responses/DB_Error'

  /merchants/{merchant_id}:
    get:
      summary: "Read merchant's info (not require login)"
      operationId: getMerchantInfo
      parameters:
        - $ref: '#/components/parameters/merchant_id'
      tags:
        - merchants
      responses:
        '200':
          $ref: '#/components/responses/Merchant'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '422':
          $ref: '#/components/responses/DB_Error'
    put:
      summary: "Update merchant's info"
      operationId: updateMerchantInfo
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/merchant_id'
      tags:
        - merchants
      requestBody:
        $ref: '#/components/requestBodies/MerchantRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Merchant'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/DB_Error'

  # Paths: Loyalty - Offers
  /loyalty/offers:
    get:
      summary: "Read offers from every store"
      operationId: readAllOffers
      tags:
        - loyalty
      responses:
        '200':
          $ref: '#/components/responses/Offers'
        '422':
          $ref: '#/components/responses/DB_Error'
    post:
      summary: "Create a new offer"
      operationId: createOffer
      security:
        - bearerAuth: []
      tags:
        - loyalty
      requestBody:
        $ref: '#/components/requestBodies/OfferRequestBody'
      responses:
        '201':
          $ref: '#/components/responses/Create'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/DB_Error'

  /loyalty/offers/{merchant_id}:
    get:
      summary: "Read offers for a specific store"
      operationId: readOffersByStore
      parameters:
        - $ref: '#/components/parameters/merchant_id'
      tags:
        - loyalty
      responses:
        '200':
          $ref: '#/components/responses/Offers'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '422':
          $ref: '#/components/responses/DB_Error'

  /loyalty/offers/{merchant_id}/{offer_id}:
    put:
      summary: "Update an Offer"
      operationId: updateOffer
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/merchant_id'
        - $ref: '#/components/parameters/offer_id'
      tags:
        - loyalty
      requestBody:
        $ref: '#/components/requestBodies/OfferRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Update'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/DB_Error'
    delete:
      summary: "Delete an Offer"
      operationId: deleteOffer
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/merchant_id'
        - $ref: '#/components/parameters/offer_id'
      tags:
        - loyalty
      responses:
        '200':
          $ref: '#/components/responses/Update'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/DB_Error'

  # Paths: Microfund - Campaigns
  /microfund/campaigns:
    get:
      summary: "Read campaigns from every store"
      operationId: readAllCampaigns
      tags:
        - microfund
      responses:
        '200':
          $ref: '#/components/responses/Campaigns'
        '422':
          $ref: '#/components/responses/DB_Error'
    post:
      summary: "Create a new campaign"
      operationId: createCampaign
      security:
        - bearerAuth: []
      tags:
        - microfund
      requestBody:
        $ref: '#/components/requestBodies/CampaignRequestBody'
      responses:
        '201':
          $ref: '#/components/responses/Create'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/DB_Error'

  /microfund/campaigns/{merchant_id}:
    get:
      summary: "Read campaigns for a specific store"
      operationId: readCampaignsByStore
      parameters:
        - $ref: '#/components/parameters/merchant_id'
      tags:
        - microfund
      responses:
        '200':
          $ref: '#/components/responses/Campaigns'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '422':
          $ref: '#/components/responses/DB_Error'

  /microfund/campaigns/{merchant_id}/{campaign_id}:
    get:
      summary: "Read a campaign"
      operationId: readACampaign
      parameters:
        - $ref: '#/components/parameters/merchant_id'
        - $ref: '#/components/parameters/campaign_id'
      tags:
        - microfund
      responses:
        '200':
          $ref: '#/components/responses/Campaign'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '422':
          $ref: '#/components/responses/DB_Error'
    put:
      summary: "Update an Campaign"
      operationId: updateCampaign
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/merchant_id'
        - $ref: '#/components/parameters/campaign_id'
      tags:
        - microfund
      requestBody:
        $ref: '#/components/requestBodies/CampaignRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Update'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/DB_Error'
    delete:
      summary: "Delete an Campaign"
      operationId: deleteCampaign
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/merchant_id'
        - $ref: '#/components/parameters/campaign_id'
      tags:
        - microfund
      responses:
        '200':
          $ref: '#/components/responses/Update'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/DB_Error'

  /microfund/campaigns/{merchant_id}/{campaign_id}/verify:
    put:
      summary: "Verify a Campaign (by Admin)"
      operationId: verifyCampaign
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/merchant_id'
        - $ref: '#/components/parameters/campaign_id'
      tags:
        - microfund
      responses:
        '200':
          $ref: '#/components/responses/Update'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/DB_Error'

components:
  parameters:
    merchant_id:
      in: path
      name: merchant_id
      schema:
        type: string
        format: uuid
      required: true
      description: "ID of the selected store"
    offer_id:
      in: path
      name: offer_id
      schema:
        type: string
        format: uuid
      required: true
      description: "ID of the selected offer"
    campaign_id:
      in: path
      name: campaign_id
      schema:
        type: string
        format: uuid
      required: true
      description: "ID of the selected campaign"
    access:
      in: path
      name: access
      schema:
        type: string
        format: enum['customer', 'merchant']
      required: true
      description: "Declare the type of user that will be created"
    email:
      in: path
      name: email
      schema:
        type: string
        format: email
      required: true
      description: "Declare the email address that will be used to verify email / restore password"

  requestBodies:
    # Auth
    AuthenticationRequestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthenticationDto'
    RegisterRequestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RegisterDto'
    RegisterWithoutPassRequestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RegisterWithoutPassDto'
    ChangePassInRequestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ChangePassInDto'
    CheckTokenRequestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CheckTokenDto'
    ChangePassOutRequestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ChangePassOutDto'

    # Profile & Merchant
    CustomerRequestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomerDto'
    MerchantRequestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MerchantDto'

    # Loyalty
    OfferRequestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OfferDto'

    # Microfund
    CampaignRequestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CampaignDto'

  responses:
    # Auth
    Authenticate:
      description: Expected response to a valid request
      content:
        application/json:
          schema:
            type: object
            properties:
              user:
                $ref: '#/components/schemas/User'
              token:
                $ref: '#/components/schemas/TokenData'

    # Profile & Merchant
    Customer:
      description: Expected response to a valid request
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/Customer'
              code:
                type: number
                default: 200


    Merchant:
      description: Expected response to a valid request
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: "#/components/schemas/Merchant"
              code:
                type: number
                default: 200
    Merchants:
      description: Expected response to a valid request
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: "#/components/schemas/Merchants"
              code:
                type: number
                default: 200
    # Loaylty - Offers
    Offers:
      description: Expected response to a valid request
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: "#/components/schemas/Offers"
              code:
                type: number
                default: 200
          example:
            - merchant_id: "3fa85f64-5717-4562-b3fc-2c963f66afa6"
              merchant_name: "Merchant 1"
              offer_id: "45454564-5rte7-4ert62-b3fc-c9rtret3f6r9"
              createdAt: "2019-09-10"
              cost: 1000
              description: "Get 10% discount"
              expiresAt: "2019-11-15"
            - merchant_id: "67a85f64-5r717-4562-b3fc-2c963f66afa6"
              merchant_name: "Merchant 2"
              offer_id: "55454564-5rre7-4ert62-b3fc-c9rtret3f6r9"
              createdAt: "2019-09-15"
              cost: 2000
              description: "1+1 Burger"
              expiresAt: "2019-11-10"

    # Microfund - Campaigns
    Campaign:
      description: Expected response to a valid request
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: "#/components/schemas/Campaign"
              code:
                type: number
                default: 200
    Campaigns:
      description: Expected response to a valid request
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: "#/components/schemas/Campaigns"
              code:
                type: number
                default: 200

    # Create, Update, Email Send, Error
    Create:
      description: Expected response to valid request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Created"
          example:
            code: 201
            message: "Campaign successfully created!"
    Update:
      description: Expected response to valid request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Updated"
          example:
            code: 200
            message: "User's Profile successfully updated!"
    EmailSend:
      description: Expected response to valid request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/EmailSent"
          example:
            message: "An email has been sent. Follow the link to verify your address!"
    Bad_Request:
      description: Bad Request (400)
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 400
            message: "Something wrong happes!"
    Unauthorized:
      description: Unauthorized (401)
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 401
            message: "Something wrong happes!"
    Forbidden:
      description: Forbidden (403)
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 403
            message: "Something wrong happes!"
    Not_Found:
      description: Not Found (404)
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 404
            message: "Something wrong happes!"
    DB_Error:
      description: DataBase Error (422)
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 422
            message: "Something wrong happes!"


  schemas:
    # Request - Auth
    AuthenticationDto:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - email
        - password
    RegisterDto:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - name
        - email
        - password
    RegisterWithoutPassDto:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        sector:
          type: string
          enum: [None, B2B Services & Other Goods and Services, Durables, Durables (Technology), Education, Food, Hotels, cafes and restaurants, Recreation and Culture]
      required:
        - name
        - email
    ChangePassInDto:
      type: object
      properties:
        oldPassword:
          type: string
          format: password
        newPassword:
          type: string
          format: password
      required:
        - oldPassword
        - newPassword
    CheckTokenDto:
      type: object
      properties:
        token:
          type: string
          format: uuid
      required:
        - token
    ChangePassOutDto:
      type: object
      properties:
        token:
          type: string
          format: uuid
        newPassword:
          type: string
          format: password
        verPassword:
          type: string
          format: password
      required:
        - token
        - newPassword
        - verPassword

    # Request - Profile & Merchant
    CustomerDto:
      type: object
      properties:
        name:
          type: string
        imageURL:
          type: string
          format: uri
      required:
        - name
    MerchantDto:
      type: object
      properties:
        name:
          type: string
        imageURL:
          type: string
          format: uri
        sector:
          type: string
          enum: [None, B2B Services & Other Goods and Services, Durables, Durables (Technology), Education, Food, Hotels, cafes and restaurants, Recreation and Culture]
        contact:
          type: object
          properties:
            phone:
              type: number
              format: int64
            websiteURL:
              type: string
              format: uri
            address:
              type: object
              properties:
                street:
                  type: string
                zipCode:
                  type: number
                  format: int64
                city:
                  type: string
              required:
                - street
                - zipCode
                - city
          required:
            - phone
            - address
      required:
        - name
        - imageURL
        - sector
    # Request - Loyalty
    OfferDto:
      type: object
      properties:
        description:
          type: string
        cost:
          type: number
        expiresAt:
          type: string
          format: date

    # Request - Microfund
    CampaignDto:
      type: object
      properties:
        description:
          type: string
        expiresAt:
          type: string
          format: date

    # Response - Auth
    TokenData:
      type: object
      properties:
        token:
          type: string
          format: uuid
        expiresIn:
          type: string
          format: date
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        access:
          type: string
          enum: [customer, merchant, admin]
        verified:
          type: boolean


    # Response - Profile & Merchant
    Customer:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        imageURL:
          type: string
          format: uri
        email:
          type: string
          format: email
        createdAt:
          type: string
          format: date
    Merchant:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        imageURL:
          type: string
          format: uri
        sector:
          type: string
          enum: [None, B2B Services & Other Goods and Services, Durables, Durables (Technology), Education, Food, Hotels, cafes and restaurants, Recreation and Culture]
        email:
          type: string
          format: email
        createdAt:
          type: string
          format: date
        contact:
          type: object
          properties:
            phone:
              type: number
              format: int64
            websiteURL:
              type: string
              format: uri
            address:
              type: object
              properties:
                street:
                  type: string
                zipCode:
                  type: number
                  format: int64
                city:
                  type: string
    Merchants:
      type: array
      items:
        $ref: "#/components/schemas/Merchant"

    # Response - Loyalty Offers
    Offer:
      type: object
      properties:
        merchant_name:
          type: string
        merchant_id:
          type: string
          format: uuid
        offer_id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date
        description:
          type: string
        cost:
          type: number
        expiresAt:
          type: string
          format: date
    Offers:
      type: array
      items:
        $ref: '#/components/schemas/Offer'

    # Response - Microfund Campaigns
    Campaign:
      type: object
      properties:
        merchant_name:
          type: string
        merchant_id:
          type: string
          format: uuid
        campaign_id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date
        description:
          type: string
        expiresAt:
          type: string
          format: date
    Campaigns:
      type: array
      items:
        $ref: '#/components/schemas/Campaign'

    # Response - Typical Create, Update, Error
    Created:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    Updated:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    EmailSent:
      type: object
      required:
        - message
      properties:
        message:
          type: string
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
