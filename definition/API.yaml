openapi: "3.0.0"

info:
  version: Draft
  title: Synergy API
  description: ""
  license:
    name: MIT

servers:
  - url: http://synergy.synergatika.com/v1
  
paths:
  # Auth Paths
  /auth/authenticate:
    post:
      summary: "Authenticate users"
      operationId: authAuthenticate
      tags:
        - authentication
      requestBody:
        $ref: '#/components/requestBodies/AuthenticationRequestBody'
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '201': 
          $ref: '#/components/responses/AuthenticateRes'
        
  /auth/register:
    post:
      summary: "Register new user"
      operationId: authRegister
      tags:
        - authentication
      requestBody:
        $ref: '#/components/requestBodies/RegistrationRequestBody'
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '201': 
          $ref: '#/components/responses/CreateResponse'

  /auth/checkVerifyToken:
    put:
      summary: "Check if Token to verify Email is valid & Validate Email Address"
      operationId: authCheckVerifyToken
      tags:
        - authentication
      requestBody:
        $ref: '#/components/requestBodies/CheckTokenRequestBody'
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '200': 
          $ref: '#/components/responses/UpdateResponse'   
          
  /auth/refreshToken:
    post:
      summary: "Refresh token"
      operationId: authRefreshToken
      tags:
        - authentication
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '201':
          $ref: '#/components/responses/RefreshTokenRes'
  
  /auth/changePass:
    put:
      summary: "A logged in user changes her/his/its password"
      operationId: authChangePass
      tags:
        - authentication
      requestBody:
        $ref: '#/components/requestBodies/ChangePassRequestBody'
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '200': 
          $ref: '#/components/responses/UpdateResponse'
          
  /auth/forgotPass:
    post:
      summary: "A user forgets her/his/its password"
      operationId: authForgotPass
      tags:
        - authentication
      requestBody:
        $ref: '#/components/requestBodies/ForgotPassRequestBody'
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'  
        '200': 
          $ref: '#/components/responses/UpdateResponse'
          
  /auth/checkRestoreToken:
    put:
      summary: "Check if Token to restore Password is valid"
      operationId: authcheckRestoreToken
      tags:
        - authentication
      requestBody:
        $ref: '#/components/requestBodies/CheckTokenRequestBody' 
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '200': 
          $ref: '#/components/responses/UpdateResponse'
          
  /auth/restorePassword:
    put:
      summary: "User update her/his/its password"
      operationId: authRestorePass
      tags:
        - authentication
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '200': 
          $ref: '#/components/responses/UpdateResponse'
          
  # Profile & Merchant Paths
  /profile:
    get:
      summary: "Read user's profile info (only for customers)"
      operationId: readUserProfile
      tags:
        - profile
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '200':
          $ref: '#/components/responses/User'
          
    put:
      summary: "Update user's profile info (only for customers)"
      operationId: updateUserProfile
      tags:
        - profile
      requestBody:
        $ref: '#/components/requestBodies/CustomerRequestBody'
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '200':
          $ref: '#/components/responses/User'

  /merchants:
    get:
      summary: "Return merchants"
      operationId: getMerchants
      tags:
        - merchant
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '200':
          $ref: '#/components/responses/Merchants'

  /merchants/{merchant_id}:
    get:
      summary: "Return merchant"
      operationId: getMerchantInfo
      parameters:
        - $ref: '#/components/parameters/merchant_id'
      tags:
        - merchant
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '200':
          $ref: '#/components/responses/Merchant'
          
    put:
      summary: "Update merchant information"
      operationId: updateMerchantInfo
      parameters:
        - $ref: '#/components/parameters/merchant_id'
      tags:
        - merchant
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '200':
          $ref: '#/components/responses/Merchant'

  # Loyalty Paths
  /loyalty/earn:
    post:
      summary: "Store rewards customer' loyalty with points"
      operationId: earnToken
      tags:
        - loyalty
      requestBody:
        $ref: '#/components/requestBodies/TransactionRequestBody'
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '201':
          $ref: '#/components/responses/EarnResponse'

  /loyalty/redeem:
    post:
      summary: "Customer redeem points at store"
      operationId: redeemToken
      tags:
        - loyalty
      requestBody:
        $ref: '#/components/requestBodies/TransactionRequestBody'
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '201':
          $ref: '#/components/responses/RedeemResponse'

  /loyalty/transaction:
    get:
      summary: "Returns logged in user's transactions"
      operationId: getTransactions
      tags:
        - loyalty
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '200':
          $ref: '#/components/responses/TransactionResponse'
          
  /loyalty/balance:
    get:
      summary: "Returns logged in user's balance"
      operationId: getBalance
      tags:
        - loyalty
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '200':
          $ref: '#/components/responses/BalanceResponse'


  /loyalty/offers:
    get:
      summary: "Returns offers from all the stores"
      operationId: getOffers
      tags:
        - loyalty
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '200':
          $ref: '#/components/responses/Offers'

    post:
      summary: "Add a new offer"
      operationId: postAnOffer
      tags: 
        - loyalty
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '201':
          $ref: '#/components/responses/CreateResponse'
          
  /loyalty/offers/{merchant_id}:
    get:
      summary: "Return offers for a specific store"
      operationId: getOffersByStore
      parameters:
        - $ref: '#/components/parameters/merchant_id'
      tags:
        - loyalty
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '200':
          $ref: '#/components/responses/Offers'
          
  /loyalty/offers/{merchant_id}/{offer_id}:
    put:
      summary: "Update an Offer"
      operationId: updateAnOffer
      parameters:
        - $ref: '#/components/parameters/merchant_id'
        - $ref: '#/components/parameters/offer_id'
      tags:
        - loyalty
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '200':
          $ref: '#/components/responses/UpdateResponse'

    delete:
      summary: "Delete an Offer"
      operationId: deleteAnOffer
      parameters:
        - $ref: '#/components/parameters/merchant_id'
        - $ref: '#/components/parameters/offer_id'
      tags:
        - loyalty
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '200':
          $ref: '#/components/responses/DeleteResponse'

  # Microfund Paths
  /microfund/campaigns:
    get:
      summary: "Read all campaigns"
      operationId: readAllCampaigns
      tags:
        - microfund
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '200':
          $ref: '#/components/responses/Campaigns'
          
    post:
      summary: "Create a new campaign"
      operationId: createCampaign
      tags:
        - microfund
      responses:
        '201':
          $ref: '#/components/responses/CreateResponse'
 
  /microfund/campaigns/{merchant_id}:
    get:
      summary: "Read all campaigns by Store"
      operationId: readCampaignByStore
      parameters:
        - $ref: '#/components/parameters/merchant_id'
      tags:
        - microfund
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '200':
          $ref: '#/components/responses/Campaigns'

  /microfund/campaigns/{merchant_id}/{campaign_id}:
    get:
      summary: "Get campaign info"
      operationId: readCampaign
      parameters:
        - $ref: '#/components/parameters/merchant_id'
        - $ref: '#/components/parameters/campaign_id'
      tags:
        - microfund
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '200':
          $ref: '#/components/responses/Campaign'
    put:
      summary: "Edit campaign info"
      operationId: updateCampaign
      parameters:
        - $ref: '#/components/parameters/merchant_id'
        - $ref: '#/components/parameters/campaign_id'
      tags:
        - microfund
      responses:
        '200':
          $ref: '#/components/responses/Campaign'
  
    delete:
      summary: "Delete a campaign"
      operationId: "deleteCampaign"
      parameters:
        - $ref: '#/components/parameters/merchant_id'
        - $ref: '#/components/parameters/campaign)id'
      tags:
        - microfund
      responses:
        '200':
          $ref: '#/components/responses/Camapign'

  /microfund/campaigns/{merchant_id}/{campaign_id}/verify:
    put:
      summary: "Administrator verifies the campaign content"
      operationId: verifyCampaignInfo
      parameters:
        - $ref: '#/components/parameters/merchant_id'
        - $ref: '#/components/parameters/campaign_id'
      tags:
        - microfund
      responses:
        default:
          $ref: '#/components/responses/UnexpectedError'
        '200':
          $ref: '#/components/responses/Update'
          
components:
  parameters:
    user_id:
      in: path
      name: user_id
      schema:
        type: string
        format: uuid
      required: true
      description: "ID of the selected user"
    merchant_id:
      in: path
      name: merchant_id
      schema:
        type: string
        format: uuid
      required: true
      description: "ID of the selected store"
    offer_id:
      in: path
      name: offer_id
      schema:
        type: string
        format: uuid
      required: true
      description: "ID of the selected offer"
    campaign_id: 
      in: path
      name: campaign_id
      schema:
        type: string
        format: uuid
      required: true
      description: "ID of the selected campaign"

  requestBodies:
    # Auth RequestBodies
    AuthenticationRequestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthenticationRequest'
          example:
            email: 'customer@somewhere.io'
            password: 'secret'
    RegistrationRequestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RegistrationRequest'
          example:
            name: 'To Synergatiko tis geitonias'
            email: 'customer@somewhere.io'
            password: 'secret'
    ChangePassRequestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ChangePassRequest'
          example:
            password: 'secret'
            new: 'aMostStrongPass'
    ForgotPassRequestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ForgotPassRequest'
          example:
            email: 'customer@somewhere.io'
    CheckTokenRequestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CheckTokenRequest'
          example:
            token: 'jefg98845tjrekjgf55ttgrt'
    # Transaction RequestBodies        
    TransactionRequestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/TransactionRequestEmail'
              - $ref: '#/components/schemas/TransactionRequestAddress'
              - $ref: '#/components/schemas/TransactionRequestCard'
          example:
            email: 'customer@somewhere.io'
            amount: 130

  responses:
    # Auth's section
    AuthenticateRes:
      description: Expected response to a valide request
      content: 
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/User"
              - $ref: '#/components/schemas/Access'
    RefreshTokenRes:
      description: Expected response to a valid request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Access"
    # User's section - Profile, Merchant's Info
    User: 
      description: Expected response to a valid request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/User"
    Merchant:
      description: Expected response to a valid request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Merchant"
    Merchants:
      description: Expected response to a valid request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Merchants"
    # Loyalty
    Offers:
      description: Expected response to a valid request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Offers"
          example: 
            - id: "3fa85f64-5717-4562-b3fc-2c963f66afa6"
              cost: 1000
              description: "Get 10% discount"
            - id: "a8a85f64-5717-6245-c3fc-2c963f66afa6"
              cost: 2000
              description: "Get 25% discount"
    EarnResponse:
      description: 'Earn points'
      content:
        application/json:    
          schema:
            $ref: "#/components/schemas/EarnResponse"
          example:
            points: 
              balance: 1300
              earned: 13
            code: 0
            message: "Succesfully earn 13 points"
    RedeemResponse:
      description: 'Redeem points'
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RedeemResponse"
          example:
            points: 
              balance: 1287
              redeemed: 13
            code: 0
            message: "Succesfully redeem 13 points"
    TransactionResponse:
      description: Expected response to a valid request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Transactions"
    BalanceResponse:
      description: Expected response to a valid request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Balance"      
    # Microfund        
    Campaign: 
      description: Expected response to a valide request
      content:
        application/json:
          schema: 
            $ref: "#/components/schemas/Campaign"
    Campaigns: 
      description: Expected response to a valide request
      content:
        application/json:
          schema: 
            $ref: "#/components/schemas/Campaigns"
    # Typical create or update and error responses
    CreateResponse:
      description: Expected response to valid request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Created"
          example: 
            code: 100
            message: "Campaign successfully created!"          
    UpdateResponse:
      description: Expected response to valid request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Updated"
          example: 
            code: 100
            message: "User's Profile successfully updated!"          
    UnexpectedError:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example: 
            code: 100
            message: "Something wrong happes!"            

  schemas:
    # Req: Auth Schemas
    AuthenticationRequest: 
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password: 
          type: string
          format: password
    RegistrationRequest:
      type: object
      required:
        - name
        - email
        - password
      properties: 
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    ChangePassRequest:
      type: object
      required:
        - password
        - new
      properties:
        password:
          type: string
          format: password
        new: 
          type: string
          format: password
    ForgotPassRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
    CheckTokenRequest:
      type: object
      required:
        - token
      properties:
        token:
          type: string
    # Req: Loyalty Schemas
    TransactionRequestCard:
      type: object
      required:
        - amount
        - card_id
      properties:
        card_id: 
          type: string
        amount:
          type: number
          format: float
          minimum: 0
    TransactionRequestEmail:
      type: object
      required:
        - amount
        - email
      properties:
        email: 
          type: string
          format: email
        amount:
          type: number
          format: float
          minimum: 0
    TransactionRequestAddress:
      type: object
      required:
        - amount
        - address
      properties:
        address: 
          type: string
        amount:
          type: number
          format: float
          minimum: 0
    # Res: Auth Schemas
    Access:
      type: object
      properties:
        bearer:
          type: string
          format: uuid
        type: 
          type: string
          enum: [customer, merchant]
        access:
          type: string
          enum: [user, admin]
    # Res: Customers & Merchants Schemas
    User: 
      type: object
      properties:
        id:
          type: string
          format: uuid
        name: 
          type: string
        imageURL:
          type: string
          format: uri
        memberSince:
          type: string
          format: date
    Merchant:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        name: 
          type: string
        imageURL:
          type: string
          format: uri
        memberSince:
          type: string
          format: date
        contact:
          type: object
          properties: 
            phone: 
              type: number
              format: int64
            address: 
              type: object
              properties:
                street:
                  type: string
                zipCode:
                  type: number
                  format: int64
                city:
                  type: string
    Merchants:
      type: array
      items:
        $ref: "#/components/schemas/Merchant"
    # Res: Loaylty Schemas
    RedeemResponse:
      type: object
      required:
        - code
        - message
      properties:
        points:
          type: object
          required:
            - redeemed
          properties:
            redeemed:
              type: integer
              format: int32
            balance:
              type: integer
              format: int32
        code:
          type: integer
          format: int32
        message:
          type: string
    EarnResponse:
      type: object
      required:
        - points
        - code
        - message      
      properties:
        points:
          type: object
          required:
            - earned
          properties:
            earned:
              type: integer
              format: int32
            balance:
              type: integer
              format: int32
        code:
          type: integer
          format: int32
        message:
          type: string
    Transaction:
      type: object
      required:
        - timestamp
        - tokens
        - merchant_id
      properties:
        timestamp:
          type: string
          format: date-time
        tokens:
          type: integer
          minimum: 0
        merchant_id:
          type: string
          format: uuid
    Transactions:
      type: array
      items:
        $ref: "#/components/schemas/Transaction"
    Balance:
      type: object
      required:
        - balance
      properties:
        balance:
          type: integer
          minimum: 0
    Offer:
      type: object
      properties:
        id:
          type: string
          format: uuid
        cost:
          type: integer
          minimum: 0
        description:
          type: string
    Offers:    
      type: array
      items:
        $ref: "#/components/schemas/Offer"
    # Res: Microfund
    Campaign:
      type: object
      properties:
        id:
          type: string
          format: uuid
        state: 
          type: string
          enum: [draft, checking, public, passProtected, expired]
        description:
          type: string
        expiresAt:
          type: string
          format: date
    Campaigns:
      type: array
      items:
        $ref: "#/components/schemas/Campaign"
    # Res: Typical Create, Update, Error Schema   
    Created:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    Updated:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
