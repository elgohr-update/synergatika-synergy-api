openapi: "3.0.0"

info:
  version: Draft
  title: Synergy API
  description: ""
  license:
    name: MIT

servers:
  - url: http://localhost:3000 #http://api.synergatika.gr

paths:
  # Paths: Authentication
  /auth/authenticate:
    post:
      summary: "Authenticate users"
      operationId: authAuthenticate
      tags:
        - authentication
      requestBody:
        $ref: '#/components/requestBodies/AuthenticationRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Authenticate'
        '202':
         $ref: '#/components/responses/Action_Required'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '404':
          $ref: '#/components/responses/Not_Found'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /auth/register:
    post:
      summary: "Auto-Register new user (only as customer)"
      operationId: authRegister
      tags:
        - authentication
      requestBody:
        $ref: '#/components/requestBodies/RegisterRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Email_Sent'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '404':
          $ref: '#/components/responses/Not_Found'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /auth/register/{access}:
    post:
      summary: "Register/Invite a new user (only for admins or merchants)"
      operationId: authRegisterWithoutPass
      security:
        - bearerAuth: []
      tags:
        - authentication
      parameters:
        - $ref: '#/components/parameters/access'
      requestBody:
        $ref: '#/components/requestBodies/RegisterWithoutPassRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Email_Sent'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/Not_Found'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /auth/set_pass:
    put:
      summary: "An invited user changes the password"
      operationId: changePassMiddle
      tags:
        - authentication
      parameters:
        - $ref: '#/components/parameters/email'
      requestBody:
        $ref: '#/components/requestBodies/ChangePassInRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Updated'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '404':
          $ref: '#/components/responses/Not_Found'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /auth/change_pass:
    put:
      summary: "A logged in user changes the password"
      operationId: changePassInside
      security:
        - bearerAuth: []
      tags:
        - authentication
      requestBody:
        $ref: '#/components/requestBodies/ChangePassInRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Updated'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/Not_Found'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /auth/verify_email/{email}:
    get:
      summary: "Ask for email validation"
      operationId: askVerification
      parameters:
        - $ref: '#/components/parameters/email'
      tags:
        - authentication
      responses:
        '200':
          $ref: '#/components/responses/Email_Sent'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '404':
          $ref: '#/components/responses/Not_Found'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'
  /auth/verify_email:
    post:
      summary: "Checks if link is valid and verify email"
      operationId: checkVerification
      tags:
        - authentication
      requestBody:
        $ref: '#/components/requestBodies/CheckTokenRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '404':
          $ref: '#/components/responses/Not_Found'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /auth/forgot_pass/{email}:
    get:
      summary: "Ask for password restoration"
      operationId: askRestoration
      parameters:
        - $ref: '#/components/parameters/email'
      tags:
        - authentication
      responses:
        '200':
          $ref: '#/components/responses/Email_Sent'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '404':
          $ref: '#/components/responses/Not_Found'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'
  /auth/forgot_pass:
    post:
      summary: "Checks if link is valid and procced"
      operationId: checkRestoration
      tags:
        - authentication
      requestBody:
        $ref: '#/components/requestBodies/CheckTokenRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Updated'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '404':
          $ref: '#/components/responses/Not_Found'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'
    put:
      summary: "A no logged in user changes the password"
      operationId: changePassOutside
      tags:
        - authentication
      requestBody:
        $ref: '#/components/requestBodies/ChangePassOutRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Updated'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '404':
          $ref: '#/components/responses/Not_Found'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  # Paths: Profile & Merchant
  /profile:
    get:
      summary: "Read user's profile info (only for customers)"
      operationId: readUserProfile
      security:
        - bearerAuth: []
      tags:
        - profile
      responses:
        '200':
          $ref: '#/components/responses/Customer'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'
    put:
      summary: "Update user's profile info (only for customers)"
      operationId: updateUserProfile
      security:
        - bearerAuth: []
      tags:
        - profile
      requestBody:
        $ref: '#/components/requestBodies/CustomerRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Customer'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /merchants:
    get:
      summary: "Read all merchants' info (not require login)"
      operationId: readAllMerchants
      tags:
        - merchants
      responses:
        '200':
          $ref: '#/components/responses/Merchants'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /merchants/{merchant_id}:
    get:
      summary: "Read merchant's info (not require login)"
      operationId: getMerchantInfo
      parameters:
        - $ref: '#/components/parameters/merchant_id'
      tags:
        - merchants
      responses:
        '200':
          $ref: '#/components/responses/Merchant'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'
    put:
      summary: "Update merchant's info"
      operationId: updateMerchantInfo
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/merchant_id'
      tags:
        - merchants
      requestBody:
        $ref: '#/components/requestBodies/MerchantRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Merchant'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  # Paths: Loyalty
  /loyalty/earn:
    post:
      summary: ""
      operationId: earnToken
      security:
        - bearerAuth: []
      tags:
        - loyalty
      requestBody:
        $ref: '#/components/requestBodies/EarnTokenRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Updated'
        '204':
          $ref: '#/components/responses/No_User'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /loyalty/redeem:
    post:
      summary: ""
      operationId: redeemToken
      security:
        - bearerAuth: []
      tags:
        - loyalty
      requestBody:
        $ref: '#/components/requestBodies/RedeemTokenRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Updated'
        '204':
          $ref: '#/components/responses/No_User'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /loyalty/balance:
    get:
      summary: ""
      operationId: readBalance
      security:
        - bearerAuth: []
      tags:
        - loyalty
      responses:
        '200':
          $ref: '#/components/responses/Balance'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /loyalty/points/{_to}:
    get:
      summary: ""
      operationId: readCustomerBalance
      parameters:
        - $ref: '#/components/parameters/_to'
      security:
        - bearerAuth: []
      tags:
        - loyalty
      responses:
        '200':
          $ref: '#/components/responses/Balance'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /loyalty/transactions:
    get:
      summary: ""
      operationId: readTransactions
      security:
        - bearerAuth: []
      tags:
        - loyalty
      responses:
        '200':
          $ref: '#/components/responses/Transactions'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  # Paths: Loyalty - Offers
  /loyalty/offers:
    get:
      summary: "Read Offers from every store"
      operationId: readAllOffers
      tags:
        - loyalty
      responses:
        '200':
          $ref: '#/components/responses/Offers'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'
    post:
      summary: "Create a new offer"
      operationId: createOffer
      security:
        - bearerAuth: []
      tags:
        - loyalty
      requestBody:
        $ref: '#/components/requestBodies/OfferRequestBody'
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /loyalty/offers/{merchant_id}:
    get:
      summary: "Read Offers for a specific store"
      operationId: readOffersByStore
      parameters:
        - $ref: '#/components/parameters/merchant_id'
      tags:
        - loyalty
      responses:
        '200':
          $ref: '#/components/responses/Offers'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /loyalty/offers/{merchant_id}/{offer_id}:
    put:
      summary: "Update an Offer"
      operationId: updateOffer
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/merchant_id'
        - $ref: '#/components/parameters/offer_id'
      tags:
        - loyalty
      requestBody:
        $ref: '#/components/requestBodies/OfferRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Updated'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'
    delete:
      summary: "Delete an Offer"
      operationId: deleteOffer
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/merchant_id'
        - $ref: '#/components/parameters/offer_id'
      tags:
        - loyalty
      responses:
        '200':
          $ref: '#/components/responses/Updated'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

# Paths: Community - Posts & Events
  /community/public:
    get:
      summary: "Read public Posts and Events from every store"
      operationId: readPublicPostsAndEvents
      tags:
        - community
      responses:
        '200':
          $ref: '#/components/responses/Posts'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'
  /community/private:
    get:
      summary: "Read private Posts and Events from every store"
      operationId: readPrivatePostsAndEvents
      security:
        - bearerAuth: []
      tags:
        - community
      responses:
        '200':
          $ref: '#/components/responses/Posts'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'
  /community:
    post:
      summary: "Create a new Post/Event"
      operationId: createPostOrEvent
      security:
        - bearerAuth: []
      tags:
        - community
      requestBody:
        $ref: '#/components/requestBodies/PostRequestBody'
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /community/public/{merchant_id}:
    get:
      summary: "Read public Posts and Events for a specific store"
      operationId: readPublicPostsAndEventsByStore
      parameters:
        - $ref: '#/components/parameters/merchant_id'
      tags:
        - community
      responses:
        '200':
          $ref: '#/components/responses/Posts'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /community/private/{merchant_id}:
    get:
      summary: "Read private posts and events for a specific store"
      operationId: readPrivatePostsAndEventsByStore
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/merchant_id'
      tags:
        - community
      responses:
        '200':
          $ref: '#/components/responses/Posts'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /community/{merchant_id}/{post_id}:
    put:
      summary: "Update a Post or an Event"
      operationId: updatePostOrEvent
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/merchant_id'
        - $ref: '#/components/parameters/post_id'
      tags:
        - community
      requestBody:
        $ref: '#/components/requestBodies/OfferRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Updated'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'
    delete:
      summary: "Delete a Post or an Event"
      operationId: deletePostOrEvent
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/merchant_id'
        - $ref: '#/components/parameters/post_id'
      tags:
        - community
      responses:
        '200':
          $ref: '#/components/responses/Updated'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  # Paths: Microfund - Campaigns
  /microfund/campaigns:
    get:
      summary: "Read Campaigns from every store"
      operationId: readAllCampaigns
      tags:
        - microfund
      responses:
        '200':
          $ref: '#/components/responses/Campaigns'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'
    post:
      summary: "Create a new Campaign"
      operationId: createCampaign
      security:
        - bearerAuth: []
      tags:
        - microfund
      requestBody:
        $ref: '#/components/requestBodies/CampaignRequestBody'
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /microfund/campaigns/{merchant_id}:
    get:
      summary: "Read Campaigns for a specific store"
      operationId: readCampaignsByStore
      parameters:
        - $ref: '#/components/parameters/merchant_id'
      tags:
        - microfund
      responses:
        '200':
          $ref: '#/components/responses/Campaigns'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /microfund/campaigns/{merchant_id}/{campaign_id}:
    get:
      summary: "Read a Campaign"
      operationId: readACampaign
      parameters:
        - $ref: '#/components/parameters/merchant_id'
        - $ref: '#/components/parameters/campaign_id'
      tags:
        - microfund
      responses:
        '200':
          $ref: '#/components/responses/Campaign'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'
    put:
      summary: "Update an Campaign"
      operationId: updateCampaign
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/merchant_id'
        - $ref: '#/components/parameters/campaign_id'
      tags:
        - microfund
      requestBody:
        $ref: '#/components/requestBodies/CampaignRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/Updated'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'
    delete:
      summary: "Delete a Campaign"
      operationId: deleteCampaign
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/merchant_id'
        - $ref: '#/components/parameters/campaign_id'
      tags:
        - microfund
      responses:
        '200':
          $ref: '#/components/responses/Updated'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

  /microfund/campaigns/{merchant_id}/{campaign_id}/verify:
    put:
      summary: "Verify a Campaign (by Admin)"
      operationId: verifyCampaign
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/merchant_id'
        - $ref: '#/components/parameters/campaign_id'
      tags:
        - microfund
      responses:
        '200':
          $ref: '#/components/responses/Updated'
        '400':
          $ref: '#/components/responses/Bad_Request'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/Unprocessable_Entity'

components:
  parameters:
    _to:
      in: path
      name: _to
      schema:
        type: string
        format: email
      required: true
      description: "Email/Address of Customer"
    merchant_id:
      in: path
      name: merchant_id
      schema:
        type: string
        format: uuid
      required: true
      description: "ID of the selected store"
    offer_id:
      in: path
      name: offer_id
      schema:
        type: string
        format: uuid
      required: true
      description: "ID of the selected offer"
    post_id:
      in: path
      name: post_id
      schema:
        type: string
        format: uuid
      required: true
      description: "ID of the selected post/event"
    campaign_id:
      in: path
      name: campaign_id
      schema:
        type: string
        format: uuid
      required: true
      description: "ID of the selected campaign"
    access:
      in: path
      name: access
      schema:
        type: string
        format: enum['customer', 'merchant']
      required: true
      description: "Declare the type of user that will be created"
    email:
      in: path
      name: email
      schema:
        type: string
        format: email
      required: true
      description: "Declare the email address that will be used to verify email / restore password"

  requestBodies:
    # Auth
    AuthenticationRequestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthenticationDto'
    RegisterRequestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RegisterDto'
    RegisterWithoutPassRequestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RegisterWithoutPassDto'
    ChangePassInRequestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ChangePassInDto'
    CheckTokenRequestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CheckTokenDto'
    ChangePassOutRequestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ChangePassOutDto'

    # Profile & Merchant
    CustomerRequestBody:
      description: ""
      required: true
      content:
        multipart/form-data:
        # application/x-www-form-urlencoded: # application/json:
          schema:
            $ref: '#/components/schemas/CustomerDto'
    MerchantRequestBody:
      description: ""
      required: true
      content:
        multipart/form-data:
        # application/x-www-form-urlencoded: # application/json:
          schema:
            $ref: '#/components/schemas/MerchantDto'

    # Loyalty
    EarnTokenRequestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/EarnPointsEmailDto'
              - $ref: '#/components/schemas/EarnPointsAddressDto'

    RedeemTokenRequestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/RedeemPointsEmailDto'
              - $ref: '#/components/schemas/RedeemPointsAddressDto'

    OfferRequestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OfferDto'

    # Community
    PostRequestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PostDto'

    # Microfund
    CampaignRequestBody:
      description: ""
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CampaignDto'

  responses:
    # Auth
    Authenticate:
      description: Expected response to a valid request
      content:
        application/json:
          schema:
            type: object
            properties:
              user:
                $ref: '#/components/schemas/User'
              token:
                $ref: '#/components/schemas/TokenData'

    # Profile & Merchant
    Customer:
      description: Expected response to a valid request
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/Customer'
              code:
                type: number
                default: 200


    Merchant:
      description: Expected response to a valid request
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: "#/components/schemas/Merchant"
              code:
                type: number
                default: 200
    Merchants:
      description: Expected response to a valid request
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: "#/components/schemas/Merchants"
              code:
                type: number
                default: 200

    # Loyalty - Offers
    Offers:
      description: Expected response to a valid request
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: "#/components/schemas/Offers"
              code:
                type: number
                default: 200
          example:
            data:
              - merchant_id: "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                merchant_name: "Merchant 1"
                merchant_imageURL: "www.images/assets/merchant1.png"
                offer_id: "45454564-5rte7-4ert62-b3fc-c9rtret3f6r9"
                createdAt: "2019-09-10"
                cost: 1000
                description: "Get 10% discount"
                expiresAt: "2019-11-15"
              - merchant_id: "67a85f64-5r717-4562-b3fc-2c963f66afa6"
                merchant_name: "Merchant 2"
                merchant_imageURL: "www.images/assets/merchant2.png"
                offer_id: "55454564-5rre7-4ert62-b3fc-c9rtret3f6r9"
                createdAt: "2019-09-15"
                cost: 2000
                description: "1+1 Burger"
                expiresAt: "2019-11-10"
            code: 200

    Balance:
      description: Expected response to a valid request
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: "#/components/schemas/Balance"
              code:
                type: number
                default: 200
          example:
            memberAddress: '0x2191eF87E392377ec08E7c08Eb105Ef5448eCED5'
            points: 50
            isRegistered: true

    Transactions:
      description: Expected response to a valid request
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: "#/components/schemas/Transactions"
              code:
                type: number
                default: 200
          example:
            data:
              - _id: '0x2191eF87E392377ec08E7c08Eb105Ef5448eCED5'
                type: 'EarnPoints'
                _from_name: 'Merchant A'
                _from_email: 'merchantA@gmail.com'
                _to_email: 'customerB@gmail.com'
                tx: '0x85d7e1737e95f4c805f6df5c9cc1c5fdab69d916feb770b4391e4aab0ab4f878'
                points: 25
                createdAt: '2019-10-05'
              - _id: '0x1234eF87E392377ec08E7c08Eb105Ef5448FG67'
                type: 'RedeemPoints'
                _from_name: 'Merchant B'
                _from_email: 'merchant_b@gmail.com'
                _to_email: 'customerB@gmail.com'
                tx: '0x54d7e1737e95f4c805f6df5c9cc1c5fdab69d916feb770b4391e4aab0ab4c762'
                points: 40
                createdAt: '2019-11-10'
            code: 200

    # Community - Posts
    Posts:
      description: Expected response to a valid request
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: "#/components/schemas/Posts"
              code:
                type: number
                default: 200
          example:
            data:
              - merchant_id: "3fa85f64-5717-4562-b3fc-2c963f66afa6"
                merchant_name: "Merchant 1"
                merchant_imageURL: "www.images/assets/merchant1.png"
                offer_id: "45454564-5rte7-4ert62-b3fc-c9rtret3f6r9"
                createdAt: "2019-09-10"
                type: 'event'
                content: "This is a public event"
              - merchant_id: "67a85f64-5r717-4562-b3fc-2c963f66afa6"
                merchant_name: "Merchant 2"
                merchant_imageURL: "www.images/assets/merchant2.png"
                offer_id: "55454564-5rre7-4ert62-b3fc-c9rtret3f6r9"
                createdAt: "2019-09-15"
                type: 'post'
                content: "These are my thoughts"
            code: 200

    # Microfund - Campaigns
    Campaign:
      description: Expected response to a valid request
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: "#/components/schemas/Campaign"
              code:
                type: number
                default: 200
    Campaigns:
      description: Expected response to a valid request
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: "#/components/schemas/Campaigns"
              code:
                type: number
                default: 200

    # Create, Updated, Email Send, Error
    Created:
      description: Expected response to valid request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Created"
          example:
            code: 201
            message: "Campaign successfully created!"
    Updated:
      description: Expected response to valid request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Updated"
          example:
            code: 200
            message: "User's Profile successfully updated!"
    Action_Required:
      description: Password or Email has not been verified
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Action_Required"
          example:
            code: 202
            message: "need_email_verification"
    No_User:
      description: Expected response to valid request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/No_User"
          example:
            code: 204
            message: "No User Found!"
    Email_Sent:
      description: Expected response to valid request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Email_Sent"
          example:
            code: 200
            message: "An email has been sent. Follow the link to verify your address!"
    Bad_Request:
      description: Bad Request (400)
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 400
            message: "Something wrong happes!"
    Unauthorized:
      description: Unauthorized (401)
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 401
            message: "Something wrong happes!"
    Forbidden:
      description: Forbidden (403)
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 403
            message: "Something wrong happes!"
    Not_Found:
      description: Not Found (404)
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 404
            message: "Something wrong happes!"
    Unprocessable_Entity:
      description: DataBase OR Blockchain Error(422)
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 422
            message: "Something wrong happes!"


  schemas:
    # Request - Auth
    AuthenticationDto:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - email
        - password
    RegisterDto:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - name
        - email
        - password
    RegisterWithoutPassDto:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        sector:
          type: string
          enum: [None, B2B Services & Other Goods and Services, Durables, Durables (Technology), Education, Food, Hotels, cafes and restaurants, Recreation and Culture]
      required:
        - name
        - email
    ChangePassInDto:
      type: object
      properties:
        oldPassword:
          type: string
          format: password
        newPassword:
          type: string
          format: password
      required:
        - oldPassword
        - newPassword
    CheckTokenDto:
      type: object
      properties:
        token:
          type: string
          format: uuid
      required:
        - token
    ChangePassOutDto:
      type: object
      properties:
        token:
          type: string
          format: uuid
        newPassword:
          type: string
          format: password
        verPassword:
          type: string
          format: password
      required:
        - token
        - newPassword
        - verPassword

    # Request - Profile & Merchant
    CustomerDto:
      type: object
      properties:
        name:
          type: string
        imageURL:
          type: string
          format: binary
    MerchantDto:
      type: object
      properties:
        name:
          type: string
        imageURL:
          type: string
          format: binary
        sector:
          type: string
          enum: [None, B2B Services & Other Goods and Services, Durables, Durables (Technology), Education, Food, Hotels, cafes and restaurants, Recreation and Culture]
        # contact:
        #   type: object
        #   properties:
        phone:
          type: number
          format: int64
        websiteURL:
          type: string
          format: uri
        # address:
        #   type: object
        #   properties:
        street:
          type: string
        postCode:
          type: number
          format: int64
        city:
          type: string
      required:
        - name
        - imageURL
        - sector
        - street
        - postCode
        - city
        - phone
    # Request - Loyalty
    EarnPointsEmailDto:
      type: object
      properties:
        password:
          type: string
          format: password
        _to:
          type: string
          format: email
        _amount:
          type: number

    EarnPointsAddressDto:
      type: object
      properties:
        password:
          type: string
          format: password
        _to:
          type: string
          format: address
        _amount:
          type: number

    RedeemPointsEmailDto:
      type: object
      properties:
        password:
          type: string
          format: password
        _to:
          type: string
          format: email
        _points:
          type: number

    RedeemPointsAddressDto:
      type: object
      properties:
        password:
          type: string
          format: password
        _to:
          type: string
          format: address
        _points:
          type: number

    OfferDto:
      type: object
      properties:
        description:
          type: string
        cost:
          type: number
        expiresAt:
          type: string
          format: date

    PostDto:
      type: object
      properties:
        content:
          type: string
        type:
          type: string
          enum: [event, post]
        access:
          type: string
          enum: [public, private, partners]

    # Request - Microfund
    CampaignDto:
      type: object
      properties:
        description:
          type: string
        expiresAt:
          type: string
          format: date

    # Response - Auth
    TokenData:
      type: object
      properties:
        token:
          type: string
          format: uuid
        expiresIn:
          type: string
          format: date
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        name:
          type: string
        imageURL:
          type: string
          format: uri
        access:
          type: string
          enum: [customer, merchant, admin]
        email_verified:
          type: boolean
        pass_verified:
          type: boolean

    # Response - Profile & Merchant
    Customer:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        imageURL:
          type: string
          format: uri
        email:
          type: string
          format: email
        createdAt:
          type: string
          format: date
    Merchant:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        imageURL:
          type: string
          format: uri
        sector:
          type: string
          enum: [None, B2B Services & Other Goods and Services, Durables, Durables (Technology), Education, Food, Hotels, cafes and restaurants, Recreation and Culture]
        email:
          type: string
          format: email
        createdAt:
          type: string
          format: date
        contact:
          type: object
          properties:
            phone:
              type: number
              format: int64
            websiteURL:
              type: string
              format: uri
        address:
          type: object
          properties:
            street:
              type: string
            postCode:
              type: string
            city:
              type: string
    Merchants:
      type: array
      items:
        $ref: "#/components/schemas/Merchant"

    # Response - Loyalty
    Balance:
      type: object
      properties:
        memberAddress:
          type: string
          format: address
        points:
          type: number
        isRegistered:
          type: boolean

    Transaction:
      type: object
      properties:
        _id:
          type: string
          format: uuid
        type:
          type: string
          enum: [EarnPoints, RedeemPoints]
        from_id:
          type: string
          format: uuid
        to_id:
          type: string
          format: uuid
        info:
          type: object
          properties:
            from_name:
              type: string
            from_email:
              type: string
              format: email
            to_email:
              type: string
              format: email
            points:
              type: number
        tx:
          type: string
        createdAt:
          type: string
          format: date
    Transactions:
      type: array
      items:
        $ref: '#/components/schemas/Transaction'

    Offer:
      type: object
      properties:
        merchant_name:
          type: string
        merchant_id:
          type: string
          format: uuid
        merchant_imageURL:
          type: string
          format: uri
        offer_id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date
        description:
          type: string
        cost:
          type: number
        expiresAt:
          type: string
          format: date
    Offers:
      type: array
      items:
        $ref: '#/components/schemas/Offer'

    # Response - Community Post & Events
    Post:
      type: object
      properties:
        merchant_name:
          type: string
        merchant_id:
          type: string
          format: uuid
        merchant_imageURL:
          type: string
          format: uri
        post_id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date
        content:
          type: string
        type:
          type: string
          enum: [post, event]
    Posts:
      type: array
      items:
        $ref: '#/components/schemas/Post'

    # Response - Microfund Campaigns
    Campaign:
      type: object
      properties:
        merchant_name:
          type: string
        merchant_id:
          type: string
          format: uuid
        campaign_id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date
        description:
          type: string
        expiresAt:
          type: string
          format: date
    Campaigns:
      type: array
      items:
        $ref: '#/components/schemas/Campaign'

    # Response - Typical Responses (Created, Updated, Email Sent, Action Required, Error)
    Created:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    Updated:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    No_User:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    Email_Sent:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    Action_Required:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
          enum: [need_email_verification, need_password_verification]

  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
